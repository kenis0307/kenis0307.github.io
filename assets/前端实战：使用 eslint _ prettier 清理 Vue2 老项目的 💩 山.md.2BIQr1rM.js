import{_ as i,c as a,o as n,ae as e}from"./chunks/framework.Dh1jimFm.js";const E=JSON.parse('{"title":"前端实战：使用 eslint + prettier 清理 Vue2 老项目的 💩 山","description":"","frontmatter":{},"headers":[],"relativePath":"前端实战：使用 eslint + prettier 清理 Vue2 老项目的 💩 山.md","filePath":"前端实战：使用 eslint + prettier 清理 Vue2 老项目的 💩 山.md"}'),t={name:"前端实战：使用 eslint + prettier 清理 Vue2 老项目的 💩 山.md"};function l(h,s,p,k,r,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="前端实战-使用-eslint-prettier-清理-vue2-老项目的-💩-山" tabindex="-1">前端实战：使用 eslint + prettier 清理 Vue2 老项目的 💩 山 <a class="header-anchor" href="#前端实战-使用-eslint-prettier-清理-vue2-老项目的-💩-山" aria-label="Permalink to &quot;前端实战：使用 eslint + prettier 清理 Vue2 老项目的 💩 山&quot;">​</a></h1><p>在维护老项目时，代码质量往往是一个令人头疼的问题。尤其是 Vue2 项目，随着时间推移，代码可能会变得越来越难以维护。本文将分享一个渐进式的迁移方法，结合 eslint 和 prettier，将老项目的 💩 山逐步清理干净。</p><h2 id="为什么不直接在旧项目中配置" tabindex="-1">为什么不直接在旧项目中配置？ <a class="header-anchor" href="#为什么不直接在旧项目中配置" aria-label="Permalink to &quot;为什么不直接在旧项目中配置？&quot;">​</a></h2><p>直接在旧项目中安装和配置 eslint + prettier 是一个非常麻烦的过程。老项目可能存在各种历史遗留问题，比如复杂的 webpack 配置、不规范的代码风格等，直接改动可能会导致项目无法运行。因此，我们采用一种更安全、渐进的方式来完成清理工作。这样也可以一边在老代码上进行开发任务，一边在另一个文件夹里清理 💩 山，最后再把代码合并。</p><h2 id="迁移步骤" tabindex="-1">迁移步骤 <a class="header-anchor" href="#迁移步骤" aria-label="Permalink to &quot;迁移步骤&quot;">​</a></h2><h3 id="_1-创建一个新的空项目" tabindex="-1">1. 创建一个新的空项目 <a class="header-anchor" href="#_1-创建一个新的空项目" aria-label="Permalink to &quot;1. 创建一个新的空项目&quot;">​</a></h3><p>使用 <code>vue-cli</code> 创建一个新的空项目。在创建项目时，根据老项目的实际情况手动选择配置，<strong>Vue2 + eslint + prettier 是必选项</strong>。这样可以确保新项目的代码规范和工具链是最新的。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new-project</span></span></code></pre></div><h3 id="_2-迁移核心文件" tabindex="-1">2. 迁移核心文件 <a class="header-anchor" href="#_2-迁移核心文件" aria-label="Permalink to &quot;2. 迁移核心文件&quot;">​</a></h3><p>将老项目中的以下核心文件复制到新项目中：</p><ul><li><code>vue.config.js</code></li><li><code>main.js</code></li><li><code>App.vue</code></li></ul><p>然后运行以下命令检查代码规范：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lint</span></span></code></pre></div><p>这一步可以帮助我们快速发现核心文件中的代码问题。</p><h3 id="_3-渐进式迁移组件和代码" tabindex="-1">3. 渐进式迁移组件和代码 <a class="header-anchor" href="#_3-渐进式迁移组件和代码" aria-label="Permalink to &quot;3. 渐进式迁移组件和代码&quot;">​</a></h3><p>接下来，逐步将老项目中的组件和其他代码复制到新项目中。在每次迁移代码时，运行 <code>npm run lint</code> 对迁移的代码进行检查和修复。</p><p>这种渐进式的迁移方式可以有效避免一次性迁移带来的问题，同时确保迁移的代码符合 eslint 和 prettier 的规范。</p><h3 id="_4-运行项目并根据需要配置-webpack-和-babel" tabindex="-1">4. 运行项目并根据需要配置 Webpack 和 Babel <a class="header-anchor" href="#_4-运行项目并根据需要配置-webpack-和-babel" aria-label="Permalink to &quot;4. 运行项目并根据需要配置 Webpack 和 Babel&quot;">​</a></h3><p>在迁移过程中，可能会遇到一些运行时问题，比如：</p><ul><li>图片地址解析</li><li>URL 代理</li><li>其他自定义 loader</li></ul><p>此时可以结合 AI 工具（如 ChatGPT）来快速生成或调整 Webpack 和 Babel 的配置。例如，添加图片地址解析的配置：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// filepath: vue.config.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  chainWebpack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    config.module</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;images&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(png</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">jpe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">gif</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">svg)(</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;url-loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;url-loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        limit: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;img/[name].[hash:7].[ext]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="_5-完整迁移并整体检查" tabindex="-1">5. 完整迁移并整体检查 <a class="header-anchor" href="#_5-完整迁移并整体检查" aria-label="Permalink to &quot;5. 完整迁移并整体检查&quot;">​</a></h3><p>当新项目可以正常运行后，将老项目的所有代码迁移到新项目中。为了避免不必要的代码干扰，可以通过配置 <code>.eslintignore</code> 忽略一些暂时不需要 lint 的文件：</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># filepath: .eslintignore</span></span>
<span class="line"><span>node_modules/</span></span>
<span class="line"><span>dist/</span></span>
<span class="line"><span></span></span>
<span class="line"><span>old_src/</span></span></code></pre></div><p>然后运行以下命令对所有代码进行整体检查和修复：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lint</span></span></code></pre></div><h3 id="_6-迁移回老项目" tabindex="-1">6. 迁移回老项目 <a class="header-anchor" href="#_6-迁移回老项目" aria-label="Permalink to &quot;6. 迁移回老项目&quot;">​</a></h3><p>当新项目的代码清理完成后且运行没有报错后，将规范化的代码迁移回老项目中，覆盖原有的 💩 山。此时需要多次测试，确保功能正常。同时，根据项目需求调整 eslint 规则，进一步优化代码质量。</p><h2 id="清理后的收益" tabindex="-1">清理后的收益 <a class="header-anchor" href="#清理后的收益" aria-label="Permalink to &quot;清理后的收益&quot;">​</a></h2><ul><li><strong>代码更易维护</strong>：清理后的代码符合统一的规范，阅读和修改更加方便。</li><li><strong>包体积更小</strong>：通过清理无用代码和优化配置，打包后的文件体积可能会显著减少。</li><li><strong>团队协作更高效</strong>：统一的代码规范减少了团队协作中的摩擦。</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>通过以上步骤，我们可以在不影响老项目运行的情况下，逐步清理代码，最终将老项目的 💩 山变成一座整洁的花园。虽然这个过程需要一定的时间和耐心，但最终的收益是值得的。希望本文对你有所帮助！</p>`,33)]))}const g=i(t,[["render",l]]);export{E as __pageData,g as default};
